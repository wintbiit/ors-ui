name: Build

on: [push, pull_request]

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: 1.22

jobs:
  linter:
    name: Go-Linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      # gen a dummy config file
      - run: touch dummy.yml

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.54
          args: --disable-all -c dummy.yml -E=gofumpt --max-same-issues=0 --timeout 5m --modules-download-mode=mod

  backend:
    name: Backend
    runs-on: ubuntu-20.04
    needs: [ linter ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: ./go.mod
      - run: go version
      - name: Build
        run: |
          go build -trimpath -ldflags "-s -w -X internal.version=${{ needs.release.outputs.new_version }}" -o ./bin/ors-ui .
        working-directory: ./
      - name: Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ors-ui-linux
          path: ./bin

  backend-windows:
    name: Backend-Windows
    runs-on: windows-2019
    needs: [ linter ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: ./go.mod
      - run: go version
      - name: Build
        run: |
          go build -trimpath -ldflags "-s -w -X internal.version=${{ needs.release.outputs.new_version }}" -o ./bin/ors-ui.exe .
        working-directory: ./
      - name: Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ors-ui-windows
          path: ./bin

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [ backend, backend-windows ]
    outputs:
        new_version: ${{ steps.should_push.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Fetch Previous version
        id: get-previous-tag
        uses: actions-ecosystem/action-get-latest-tag@v1.6.0

      - name: mkdir
        run: |
          mkdir dist

      - name: Download Artifact Linux
        uses: actions/download-artifact@v4
        with:
          name: ors-ui-linux
          path: ./dist

      - name: Download Artifact Windows
        uses: actions/download-artifact@v4
        with:
          name: ors-ui-windows
          path: ./dist

      - name: ls
        run: |
          ls -l ./dist

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: yarn global add semantic-release @semantic-release/changelog && semantic-release

      - name: Fetch Current version
        id: get-current-tag
        uses: actions-ecosystem/action-get-latest-tag@v1.6.0

      - name: Output New Version
        id: should_push
        run: |
          old_version=${{steps.get-previous-tag.outputs.tag}}
          new_version=${{steps.get-current-tag.outputs.tag }}

          if [ "$old_version" != "$new_version" ]; then
              echo "new_version=$new_version" >> $GITHUB_OUTPUT
          else
              echo "new_version=" >> $GITHUB_OUTPUT
          fi

  docker:
    runs-on: ubuntu-latest
    needs: [ release ]
    if: github.event_name == 'push' && needs.release.outputs.new_version != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Go Build Cache for Docker
        uses: actions/cache@v3
        with:
          path: go-build-cache
          key: ${{ runner.os }}-go-build-cache-${{ hashFiles('**/go.sum') }}

      - name: inject go-build-cache into docker
        # v1 was composed of two actions: "inject" and "extract".
        # v2 is unified to a single action.
        uses: reproducible-containers/buildkit-cache-dance@v2.1.2
        with:
          cache-source: go-build-cache

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Push
        uses: docker/build-push-action@v5
        if: github.event_name == 'push'
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/wintbiit/ors-ui:latest
            ghcr.io/wintbiit/ors-ui:${{ needs.release.outputs.new_version }}
          build-args: |
            VERSION=${{ needs.release.outputs.new_version }}
          labels: |
            org.opencontainers.image.source=https://github.com/wintbiit/ors-ui
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.version=${{ needs.release.outputs.new_version }}
            org.opencontainers.image.title=ors-ui ${{ needs.release.outputs.new_version }}
            org.opencontainers.image.licenses=AGPL-3.0
          cache-from: type=gha
          cache-to: type=gha,mode=max
